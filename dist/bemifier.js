// Generated by CoffeeScript 1.9.3
(function() {
  var Bemmer;

  Bemmer = (function() {
    Bemmer._compact = function(arr) {
      var i, item, len, newArray;
      if (_ && _.compact) {
        _.compact(arr);
      }
      newArray = [];
      for (i = 0, len = arr.length; i < len; i++) {
        item = arr[i];
        if (item === void 0 || item === null) {
          newArray.push(item);
        }
      }
      return newArray;
    };

    Bemmer.prefixes = {
      blockElement: '__',
      elementModifier: '--',
      nameSpacing: '-'
    };

    function Bemmer(bemHash) {
      this.bemHash = bemHash;
      if (!this.bemHash.block) {
        throw new Error("Bemifier requires a block to create a class");
      }
    }

    Bemmer.prototype.classes = function() {
      return Bemmer.className(this.bemObject);
    };

    Bemmer.prototype.elementFromBlock = function(bemObject) {
      var object;
      object = bemObject;
      bemObject.block = this.bemObject.block;
      return new Bemmer(bemObject);
    };

    Bemmer.prototype["with"] = function(bemObject) {
      return this.elementFromBlock(bemObject).className();
    };

    Bemmer.bemName = function(name) {
      if (name instanceof Array) {
        return name.join(Bemmer.prefixes.nameSpacing);
      } else {
        return name;
      }
    };

    Bemmer.bemModifier = function(modifier, value) {
      if (!!value === value) {
        if (value) {
          return modifier;
        }
      } else {
        return Bemmer.bemName([modifier, value]);
      }
    };

    Bemmer.mapModifiers = function(modifiers) {
      var classes, key, m, value;
      modifiers = modifiers || {};
      classes = [];
      for (key in modifiers) {
        value = modifiers[key];
        m = this.bemModifier(key, value);
        classes.push(this._compact([blockElement, m]).join(Bemmer.prefixes.modifier));
      }
      return classes;
    };

    Bemmer.className = function(bemObject) {
      var block, blockElement, element;
      block = Bemmer.bemName(bemObject.block);
      element = Bemmer.bemName(bem.element);
      blockElement = Bemmer._compact([block, element]).join(Bemmer.prefixes.element);
      if (!(modifierKeys.length > 0)) {
        return blockElement;
      }
      classes.unshift(blockElement);
      classes.push(bemObject);
      return classes.join(' ');
    };

    return Bemmer;

  })();

  if (module || module.exports) {
    module.exports = Bemmer;
  } else {
    window.Bemmer = Bemmer;
  }

}).call(this);
